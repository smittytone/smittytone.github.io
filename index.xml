<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>smittytone&#39;s Software Library on smittytone’s software library</title>
    <link>https://smittytone.github.io/</link>
    <description>Recent content in smittytone&#39;s Software Library on smittytone’s software library</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://smittytone.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ASCII</title>
      <link>https://smittytone.github.io/ascii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/ascii/</guid>
      <description>About ASCII ASCII is a simple tool you can use to generate 8x8 character glyphs for maker projects using 8x8 LED matrix displays.
Create a glyph pattern (black squares are equivalent to lit matrix segments) and then click Grid to Values to convert the pattern into column values that can be pasted into your microcontroller code. Existing values can be pasted into the Grid Pixel Values field — click Values to Grid to display the pattern they form.</description>
    </item>
    
    <item>
      <title>Bash Scripts</title>
      <link>https://smittytone.github.io/bash-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/bash-scripts/</guid>
      <description>In the case of scripts which operate as utilities, use the --help switch to learn how to make use of the tool. Scripts which are intended to be run once — for example, the Raspberry Pi setup scripts — are documented in their comments. Scripts run in other contexts, eg. in Xcode, are not yet documented.
Click on the name of the script to go and view its source code.</description>
    </item>
    
    <item>
      <title>BuildAPIAccess</title>
      <link>https://smittytone.github.io/buildapiaccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/buildapiaccess/</guid>
      <description>About BuildAPIAccess BuildAPIAccess is an Objective-C (macOS, iOS and tvOS) wrapper for Electric Imp’s impCentral™ API. It is called BuildAPIAccess for historical reasons: it was written to the support Electric Imp’s Build API, the predecessor to the impCentral API.
BuildAPIAccess requires the (included) classes Connexion, Token and LogStreamEvent. All three are convenience classes for combining properties.
 Connexion combines an NSURLSession instance and associated impCentral API connection data. Token is used to store impCentral API authorization data.</description>
    </item>
    
    <item>
      <title>Cløck</title>
      <link>https://smittytone.github.io/oclock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/oclock/</guid>
      <description>About Cløck Cløck is a Swift application that can be used to manage digital clocks based on the Electric Imp Platform. As such it is primarily intended to work with my impClock project, which is based on the Electric Imp IoT platform.
It provides a means to control one or more impClocks, with handy buttons, pickers, sliders and other controls for all of the device’s key features.
&amp;nbsp;  &amp;nbsp;   In addition, Cløck allows you to manage multiple impClocks: add them to the app as you acquire or build them, and then select any one to access its settings through the Time and Display settings, as shown above.</description>
    </item>
    
    <item>
      <title>Controller</title>
      <link>https://smittytone.github.io/controller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/controller/</guid>
      <description>About Controller Controller is an iOS and watchOS app combo that allows you to control Electric Imp Platform-based Internet of Things devices from your Apple Watch.
How To Use Controller Controller’s iPhone app provides a means to add devices — enter the device’s agent ID and a name — and sync the list of devices to the Watch app, which will provide an appropriate UI for each type of device. As such it is currently limited to the device types that I use, but the design is modular, so others can create UIs and WKInterfaceController objects of their own to personalise the app for their use.</description>
    </item>
    
    <item>
      <title>eiapps</title>
      <link>https://smittytone.github.io/ei_apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/ei_apps/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Fighting Fantasy Game Manager</title>
      <link>https://smittytone.github.io/fightingfantasy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/fightingfantasy/</guid>
      <description>About Fighting Fantasy Game Manager This is a Swift 4 port (for macOS) of a much older Objective-C version written circa 2003 following the 20th anniversary of the publication of Penguin Books&amp;rsquo; Fighting Fantasy gamebook series and the revival of the books by Icon Books. The concept of a program to help players with their games — setting up characters, handling combat, managing their backpack contents, testing for Luck, etc. — goes back to a mid- to late 1990s Real Basic classic Mac OS version which, in turn, was a redevelopment of an original implementation for the Dragon 32 micro written around 1985, while the gamebooks were still being published by Penguin&amp;rsquo;s Puffin imprint.</description>
    </item>
    
    <item>
      <title>Fontismo</title>
      <link>https://smittytone.github.io/fontismo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/fontismo/</guid>
      <description>About Fontismo Fontismo is an iPad app that provides access to 50 open-licence fonts that are readily available on other platforms but not the iPad.
Please see the licence section, below, for information on the licences that these fonts are made available under, and the non-commercial nature of Fontismo.
Back to the Top
How to Use Fontismo The first time you run Fontismo, it will provide you with a brief introduction to its functionality.</description>
    </item>
    
    <item>
      <title>Hex</title>
      <link>https://smittytone.github.io/hex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/hex/</guid>
      <description>About Hex This script reads in a file and outputs it as a hex string formatted for use in, for example, Electric Imp Squirrel applications.
For example, say you have the file sample.png which you wish to serve from an agent. As the agent has no file system, you can’t simply upload the image file. Instead, you store the image as a string which the agent returns upon request and includes the header:</description>
    </item>
    
    <item>
      <title>HT16K33Segment</title>
      <link>https://smittytone.github.io/ht16k33segment-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/ht16k33segment-python/</guid>
      <description>About HT16K33Segment This script provides a hardware driver for the Adafruit 0.56-inch 4-digit, 7-segment LED display, which is based on the Holtek HT16K33 controller. The LED communicates over any I²C bus.
Two versions of the driver are available, one for CircuitPython applications, the other for code written in MicroPython.
Please see the source code repo for details of the driver’s API.
Back to the Top
Release Notes  1.0.0 04 March 2020  Initial public release.</description>
    </item>
    
    <item>
      <title>MNU</title>
      <link>https://smittytone.github.io/mnu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/mnu/</guid>
      <description>About MNU MNU is a macOS main menu bar utility which provides not only a number of handy controls for system settings you may change frequently, but also allows you to invoke shell scripts that you use often.
MNU comes pre-configured with these useful items:
 A switch to enable or disable macOS’s Dark Mode (Mojave and up) A switch to show or hide files on the Desktop A switch to show or hide hidden files A trigger to update your Git repos (requires gitup) A trigger to update your Homebrew installation (brew update) A trigger to upgrade your Homebrew installation (brew upgrade) Any or all of these stock items can be hidden from view if you don’t need them; you can add your own items; and you can re-order the items.</description>
    </item>
    
    <item>
      <title>pdfmaker</title>
      <link>https://smittytone.github.io/pdfmaker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/pdfmaker/</guid>
      <description>How to Use pdfmaker pdfmaker is a macOS command line tool which allows you to combine JPEG image files into a single PDF file and to extract a series of images from an existing PDF file.
In Terminal, run:
$ pdfmaker --source &amp;lt;image source directory&amp;gt; \ --destination &amp;lt;pdf save directory/filename.pdf&amp;gt; \ --compress &amp;lt;amount&amp;gt; If you omit any of these switches, their default values will be used:
 Source: The directory from which you ran the tool.</description>
    </item>
    
    <item>
      <title>PreviewMarkdown</title>
      <link>https://smittytone.github.io/previewmarkdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/previewmarkdown/</guid>
      <description>How to Use PreviewMarkdown Install the app and run it. This will register the availability of the app’s QuickLook extensions, Previewer and Thumbnailer. You can now quit the app: just click OK:
You can disable or re-enable Previewer and Thumbnailer in System Preferences &amp;gt; Extensions:
For some background information on how Catalina delivers QuickLook previews, please see this blog post.
Troubleshooting If it appears that either Previewer or Thumbnailer are not working after you have run the host app, please log out of your Mac and then log back in.</description>
    </item>
    
    <item>
      <title>Ski</title>
      <link>https://smittytone.github.io/ski/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/ski/</guid>
      <description>About Ski Some Python 3 silliness: arcade action circa 1980 courtesy of ncurses.
Press [Space] to play&amp;hellip;
Back to the Top
Release Notes  1.0.0 30 March 2019  Initial release.    Back to the Top
Source Code You can view Ski’s source code at GitHub.
Back to the Top</description>
    </item>
    
    <item>
      <title>Spasm</title>
      <link>https://smittytone.github.io/spasm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/spasm/</guid>
      <description>About Spasm spasm is an assembler/disassembler for the Motorola 6809 microprocessor written in Python 3.
It was written to generate 6809 machine code for a separate processor emulation project. As such, it does not output files into a standard format, but in the form of JSON intended to be read by the emulator. The output file’s extension is .6809, but it is a text file containing a JSON object:
{ &amp;quot;address&amp;quot; : &amp;lt;start_address_of_code&amp;gt;, &amp;quot;code&amp;quot; : &amp;lt;string_of_assembled_code_bytes&amp;gt; } A sample file, sample01.</description>
    </item>
    
    <item>
      <title>Squinter</title>
      <link>https://smittytone.github.io/squinter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/squinter/</guid>
      <description>About Squinter Squinter is a utility to help you work on Electric Imp software development projects using your own editor and code files you keep in a local folder — which may also be synchronized with a cloud service like Dropbox or a version control system like GitHub.
With Squinter and Electric Imp’s impCentral™ API you can:
 Work on your Electric Imp project code in your favourite text editor ‘Compile’ in local library and other files before uploading the complete code to the Electric Imp impCloud™ You can take charge of your devices:  Assign them to application firmware (via device groups) Update their code Reboot devices to run newly uploaded code View device logs   Work with code in a source control system And much more&amp;hellip;  How To Use Squinter Contents  Electric Imp Accounts Working With Source Code Files Working With Projects and Products Working With Device Groups Working With Devices Incorporating Libraries And Files In Your Code Deploying Code Debugging Code Configuring Squinter Updating Squinter  Electric Imp Accounts Squinter requires an Electric Imp account.</description>
    </item>
    
    <item>
      <title>Squinter Release Notes</title>
      <link>https://smittytone.github.io/squinter/releases.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/squinter/releases.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>SSD1306</title>
      <link>https://smittytone.github.io/ssd1306-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/ssd1306-python/</guid>
      <description>About SSD1306 This script provides a hardware driver for the Adafruit 128x32 OLED and Adafruit 128x64 OLED displays, which are based on the Solomon SSD1306 controller. The LEDs communicate over any I²C bus, but not SPI.
The driver supports CircuitPython applications.
Please see the source code repo for details of the driver’s API.
Back to the Top
Release Notes  1.0.0 11 March 2020  Initial public release.    Back to the Top</description>
    </item>
    
    <item>
      <title>The Valley</title>
      <link>https://smittytone.github.io/valley/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/valley/</guid>
      <description>How To Play The Valley The object of the game is to save the Valley from the forces of evil: find the legendary Helm of Evanna and this will be achieved. The Helm is hidden in one of Vounim’s Lairs, each on an island within a forest. To have a chance of finding the Helm, you will need to reach the experience level of a Warlord, which you do by travelling through the Valley, its swamps and forests, and the Dark Tower of Zaexon battling monsters.</description>
    </item>
    
    <item>
      <title>Unicoder</title>
      <link>https://smittytone.github.io/unicoder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/unicoder/</guid>
      <description>About Unicoder Unicoder is a utility for converting UTF-8 character codes, such as U+0024 ($) or U+20AC (€), into sequences of bytes presented as hexadecimal strings.
Unicoder’s output is in the form of Squirrel string assignments that are ready to be cut and pasted into Squirrel code. For example:
$ ./unicoder.py U+20AC U+24 U+0939 U+0025 U+10348 local unicodeString=&amp;quot;\xE2\x82\xAC&amp;quot;; local unicodeString=&amp;quot;\x24&amp;quot;; local unicodeString=&amp;quot;\xE0\xA4\xB9&amp;quot;; local unicodeString=&amp;quot;\x25&amp;quot;; local unicodeString=&amp;quot;\xF0\x90\x8D\x88&amp;quot;; As you can see from the example above, just call the script with one or more UTF-8 codes separated by spaces.</description>
    </item>
    
    <item>
      <title>XBeeParser</title>
      <link>https://smittytone.github.io/xbeeparser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/xbeeparser/</guid>
      <description>About XBeeParser This is an XBee packet decoder written in Python 3.
It is a work in progress. The current version decodes all the standard XBee packets, and provides further decoding of a limited (but growing) selection of Zigbee Device Object (ZDO) commands (eg. 16-bit network address request) and general (aka ‘global’) Zigbee Cluster Library commands (eg. Read Attribute).
How To Use XBeeParser Run XBeeParser at the command line and provide a code XBee packet as a string of hexadecimal octets:</description>
    </item>
    
  </channel>
</rss>