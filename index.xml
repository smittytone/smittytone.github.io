<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>smittytone&#39;s Software Library on smittytone’s software library</title>
    <link>https://smittytone.github.io/</link>
    <description>Recent content in smittytone&#39;s Software Library on smittytone’s software library</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://smittytone.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ASCII</title>
      <link>https://smittytone.github.io/ascii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/ascii/</guid>
      <description>About ASCII ASCII is a simple tool you can use to generate 8x8 character glyphs for maker projects using 8x8 LED matrix displays.
Create a glyph pattern (black squares are equivalent to lit matrix segments) and then click Values to convert the pattern into column values that can be pasted into your microcontroller code. Existing values can be pasted into the values field — click Write to display the pattern they form.</description>
    </item>
    
    <item>
      <title>BuildAPIAccess</title>
      <link>https://smittytone.github.io/buildapiaccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/buildapiaccess/</guid>
      <description>About BuildAPIAccess BuildAPIAccess is an Objective-C (macOS, iOS and tvOS) wrapper for Electric Imp’s impCentral™ API. It is called BuildAPIAccess for historical reasons: it was written to the support Electric Imp’s Build API, the predecessor to the impCentral API.
BuildAPIAccess requires the (included) classes Connexion, Token and LogStreamEvent. All three are convenience classes for combining properties.
 Connexion combines an NSURLSession instance and associated impCentral API connection data. Token is used to store impCentral API authorization data.</description>
    </item>
    
    <item>
      <title>Cløck</title>
      <link>https://smittytone.github.io/oclock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/oclock/</guid>
      <description>About Cløck Cløck is a Swift application that can be used to manage digital clocks based on the Electric Imp Platform. As such it is primarily intended to work with my impClock project, which is based on the Electric Imp IoT platform.
It provides a means to control one or more impClocks, with handy buttons, pickers, sliders and other controls for all of the device’s key features.
&amp;nbsp;  &amp;nbsp;   In addition, Cløck allows you to manage multiple impClocks: add them to the app as you acquire or build them, and then select any one to access its settings through the Time and Display settings, as shown above.</description>
    </item>
    
    <item>
      <title>Controller</title>
      <link>https://smittytone.github.io/controller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/controller/</guid>
      <description>About Controller Controller is an iOS and watchOS app combo that allows you to control Electric Imp Platform-based Internet of Things devices from your Apple Watch.
How To Use Controller Controller’s iPhone app provides a means to add devices — enter the device’s agent ID and a name — and sync the list of devices to the Watch app, which will provide an appropriate UI for each type of device. As such it is currently limited to the device types that I use, but the design is modular, so others can create UIs and WKInterfaceController objects of their own to personalise the app for their use.</description>
    </item>
    
    <item>
      <title>Fighting Fantasy Game Manager</title>
      <link>https://smittytone.github.io/fightingfantasy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/fightingfantasy/</guid>
      <description>About Fighting Fantasy Game Manager This is a Swift 4 port (for macOS) of a much older Objective-C version written circa 2003 following the 20th anniversary of the publication of Penguin Books&amp;rsquo; Fighting Fantasy gamebook series and the revival of the books by Icon Books. The concept of a program to help players with their games — setting up characters, handling combat, managing their backpack contents, testing for Luck, etc. — goes back to a mid- to late 1990s Real Basic classic Mac OS version which, in turn, was a redevelopment of an original implementation for the Dragon 32 micro written around 1985, while the gamebooks were still being published by Penguin&#39;s Puffin imprint.</description>
    </item>
    
    <item>
      <title>MNU</title>
      <link>https://smittytone.github.io/mnu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/mnu/</guid>
      <description>About MNU MNU is a macOS main menu bar utility which provides not only a number of handy controls for system settings you may change frequently, but also allows you to invoke shell scripts that you use often.
MNU comes pre-configured with these useful items:
 A switch to enable or disable macOS’s Dark Mode (Mojave and up) A switch to show or hide files on the Desktop A switch to show or hide hidden files A trigger to update your Git repos (requires gitup) A trigger to update your Homebrew installation (brew update) A trigger to upgrade your Homebrew installation (brew upgrade) Any or all of these stock items can be hidden from view if you don’t need them; you can add your own items; and you can re-order the items.</description>
    </item>
    
    <item>
      <title>pdfmaker</title>
      <link>https://smittytone.github.io/pdfmaker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/pdfmaker/</guid>
      <description>How to Use pdfmaker pdfmaker is a macOS command line tool which allows you to combine JPEG image files into a single PDF file and to extract a series of images from an existing PDF file.
In Terminal, run:
$ pdfmaker --source &amp;lt;image source directory&amp;gt; \ --destination &amp;lt;pdf save directory/filename.pdf&amp;gt; \ --compress &amp;lt;amount&amp;gt; If you omit any of these switches, their default values will be used:
 Source: The directory from which you ran the tool.</description>
    </item>
    
    <item>
      <title>PreviewMarkdown</title>
      <link>https://smittytone.github.io/previewmarkdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/previewmarkdown/</guid>
      <description>How to Use PreviewMarkdown Install the app and run it. This will register the availability of the app’s QuickLook extensions, Previewer and Thumbnailer. You can now quit the app: just click OK:
You can disable or re-enable Previewer and Thumbnailer in System Preferences &amp;gt; Extensions:
For some background information on how Catalina delivers QuickLook previews, please see this blog post.
Troubleshooting If it appears that either Previewer or Thumbnailer are not working after you have run the host app, please log out of your Mac and then log back in.</description>
    </item>
    
    <item>
      <title>Squinter</title>
      <link>https://smittytone.github.io/squinter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/squinter/</guid>
      <description>About Squinter Squinter is a utility to help you work on Electric Imp software development projects using your own editor and code files you keep in a local folder — which may also be synchronized with a cloud service like Dropbox or a version control system like GitHub.
With Squinter and Electric Imp’s impCentral™ API you can:
 Work on your Electric Imp project code in your favourite text editor ‘Compile’ in local library and other files before uploading the complete code to the Electric Imp impCloud™ You can take charge of your devices:  Assign them to application firmware (via device groups) Update their code Reboot devices to run newly uploaded code View device logs   Work with code in a source control system And much more&amp;hellip;  How To Use Squinter Contents  Electric Imp Accounts Working With Source Code Files Working With Projects and Products Working With Device Groups Working With Devices Incorporating Libraries And Files In Your Code Deploying Code Debugging Code Configuring Squinter Updating Squinter  Electric Imp Accounts Squinter requires an Electric Imp account.</description>
    </item>
    
    <item>
      <title>Squinter Release Notes</title>
      <link>https://smittytone.github.io/squinter/releases.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/squinter/releases.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Valley</title>
      <link>https://smittytone.github.io/valley/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smittytone.github.io/valley/</guid>
      <description>How to Play The object of the game is to save the Valley from the forces of evil: find the legendary Helm of Evanna and this will be achieved. The Helm is hidden in one of Vounim’s Lairs, each on an island within a forest. To have a chance of finding the Helm, you will need to reach the experience level of a Warlord, which you do by travelling through the Valley, its swamps and forests, and the Dark Tower of Zaexon battling monsters.</description>
    </item>
    
  </channel>
</rss>